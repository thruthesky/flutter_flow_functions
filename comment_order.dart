String commentOrder(
  String? order,
  int? depth,
  int? noOfComments,
) {
  /// 코멘트 트리 구조를 표현하기 위한 정렬 문자열 생성
  ///
  /// 참고, `맨 처음 코멘트`란, 글에 최초로 작성되는 첫 번째 코멘트. 맨 처음 코멘트는 1개만 존재한다.
  /// 참고, `첫번째 레벨 코멘트`란, 글 바로 아래에 작성되는 코멘트로, 부모 코멘트가 없는 코멘트이다. 여러개의 코멘트가 있다.
  /// 참고, `부모 코멘트`란, 자식 코멘트가 있는 코멘트 또는 자식을 만들 코멘트.
  /// 참고, `자식 코멘트`란, 부모 코멘트 아래에 작성되는 코멘트 또는 부모 코멘트가 있는 코멘트.
  ///
  /// [order] 는
  ///   - `첫 번째 레벨 코멘트(부모가 없는 코멘트)` 에는 빈 문자열 또는 null,
  ///   - `자식 코멘트`를 생성 할 때, 부모 코멘트의 order 값을 그대로 전달하면 된다.
  ///
  /// [depth] 는
  ///   - `첫 번째 레벨 코멘트(부모가 없는 코멘트)`에서는 0(또는 null),
  ///   - `자식 코멘트(부모가 있는 코멘트)`의 경우, 부모 코멘트의 depth + 1 값을 전달하면 된다.
  ///
  /// [noOfComment] 는 항상 **글의 noOfComments 값**을 전달하면 된다.
  ///   원래는 코멘트마다 noOfComment 값을 가지고 있고, 이 함수에서 글 또는 부모 코멘트의 noOfComments 를 받아서,
  ///   처리를 했는데, 이 함수가 문제가 아니라, 부모 코멘트마다 noOfComments 를 유지하는 것이, 플러터플로의 복잡도를 높이는
  ///   것이되어, 그냥 글의 noOfComments 를 사용하도록 변경했다.
  ///
  ///
  /// 참고, 이 함수는 depth 의 값을 0(또는 null)으로 입력 받지만, 실제 코멘트 DB(문서)에 저장하는 값은 1부터 시작하는 것을
  ///   원칙으로 한다. 예를 들면, depth 값을 1 증가 시키기 위해서, +1 증가시키는 함수(IncreaseInteger)를 써야 하는데,
  ///   첫번째 레벨의 경우(부모 코멘트가 없는 경우), IncreaseInteger 함수에 0(NULL)을 지정하면 +1을 해서, 1 값이 리턴된다.
  ///   그 값을 코멘트 DB(문서)의 depth 에 저장하므로, 자연스럽게 1 부터 시작하는 것이다.
  ///   또는 첫번째 레벨의 코멘트는 그냥 depth=1 로 지정하면 된다.
  ///   그리고 DB(문서)의 depth 는 사실, 0으로 시작하든 1로 시작하던, UI 랜더링 할 때, depth 만 잘 표현하면 된다.
  ///
  /// 참고, [depth] 가 16 단계 이상으로 깊어지면, 16 단계 이상의 코멘트는 순서가 뒤죽 박죽이 될 수 있다.
  ///   이 때, 전체가 다 뒤죽 박죽이 되는 것이 아니라, 16단계 이내에서는 잘 정렬되어 보이고, 17단계 이상의 코멘트 들만
  ///   정렬이 안되, 17단계, 18단계, 19단계... 등 모두 16단계 부모의 [order] 를 가지므로 16단계 (들여쓰기)아래애서만
  ///   어떤 것이 먼저 쓰였는지 구분하기 어렵게 된다.
  ///
  /// 참고, 최소 90만개, `최대 90만개 * 16` 의 코멘트를 지원한다.

  order = order == null || order == ''
      ? List<String>.filled(16, '100000').join(".")
      : order;
  depth ??= 0;
  noOfComments ??= 0;
  if (depth >= 16) return order;

  // print("order(in): $order, depth: $depth");
  if (noOfComments == 0) {
    return order;
  } else {
    List<String> parts = order.split('.');
    String no = parts[depth];
    // print('no=$no, depth=$depth, parts=$parts');
    int computed = int.parse(no) + noOfComments;
    // print("computed: $computed, depth: $depth");
    parts[depth] = computed.toString();
    order = parts.join('.');

    // print("order(out): $order");
    return order;
  }
}

void main() {
  final a = commentOrder(null, null, 0);
  print(a ==
      '100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final b = commentOrder(null, 0, 1);
  print(b ==
      '100001.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final c = commentOrder('', 0, 2);
  print(c ==
      '100002.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final d = commentOrder(null, 0, 3);
  print(d ==
      '100003.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final e = commentOrder(null, 0, 4);
  print(e ==
      '100004.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final f = commentOrder('', 0, 5);
  print(f ==
      '100005.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  /// 2 단계

  final aa = commentOrder(a, 1, 6);
  print(aa ==
      '100000.100006.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final ba = commentOrder(b, 1, 7);
  print(ba ==
      '100001.100007.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final bb = commentOrder(b, 1, 8);
  print(bb ==
      '100001.100008.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final bc = commentOrder(b, 1, 9);
  print(bc ==
      '100001.100009.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final bd = commentOrder(b, 1, 10);
  print(bd ==
      '100001.100010.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final be = commentOrder(b, 1, 11);
  print(be ==
      '100001.100011.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final fa = commentOrder(f, 1, 12);
  print(fa ==
      '100005.100012.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  /// 3 단계

  final faa = commentOrder(fa, 2, 13);
  print(faa ==
      '100005.100012.100013.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final bba = commentOrder(bb, 2, 14);
  print(bba ==
      '100001.100008.100014.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final bbb = commentOrder(bb, 2, 15);
  print(bbb ==
      '100001.100008.100015.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final bbc = commentOrder(bb, 2, 16);
  print(bbc ==
      '100001.100008.100016.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  /// 4 단계
  final bbba = commentOrder(bbb, 3, 17);
  print(bbba ==
      '100001.100008.100015.100017.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final bbbb = commentOrder(bbb, 3, 18);
  print(bbbb ==
      '100001.100008.100015.100018.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final bbbc = commentOrder(bbb, 3, 19);
  print(bbbc ==
      '100001.100008.100015.100019.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final bbbd = commentOrder(bbb, 3, 20);
  print(bbbd ==
      '100001.100008.100015.100020.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');

  final faaa = commentOrder(faa, 3, 21);
  print(faaa ==
      '100005.100012.100013.100021.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final faab = commentOrder(faa, 3, 22);
  print(faab ==
      '100005.100012.100013.100022.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final faac = commentOrder(faa, 3, 23);
  print(faac ==
      '100005.100012.100013.100023.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
  final faad = commentOrder(faa, 3, 24);
  print(faad ==
      '100005.100012.100013.100024.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000.100000');
}
